{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.style.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.style.jsx","components/Notification/Notification.style.jsx","components/Notification/Notification.jsx","components/Statistics/Statistics.jsx","components/Container/Container.style.jsx","components/Container/Container.jsx","components/Section/Section.style.jsx","components/Section/Section.jsx","App.js","reportWebVitals.js","index.js"],"names":["Button","styled","button","FeedbackOptions","state","onLeaveFeedback","options","Object","keys","map","option","onClick","List","ul","Item","li","Paragraph","p","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","Wrapper","div","Container","children","Title","h1","Section","title","App","useState","setGood","setNeutral","setBad","feedbacksAmounts","handleTotalAmount","e","values","reduce","sum","current","Math","round","countPositiveFeedback","className","feedback","currentTarget","textContent","prevState","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78391af7.chunk.js","sourcesContent":["import styled from '@emotion/styled'\r\n\r\nconst Button = styled.button`\r\n  background-color: #e7e7e7;\r\n  color: black;\r\n  border: none;\r\n  cursor: pointer;\r\n  padding: 15px 32px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  text-transform: capitalize;\r\n  display: inline-block;\r\n  font-size: 25px;\r\n\r\n  &:not(:last-child) {\r\n    margin-right: 10px;\r\n  }\r\n  &:hover {\r\n    background-color: #22343b;\r\n    color: white;\r\n  }\r\n`\r\n\r\nexport { Button }\r\n","import React from 'react'\r\nimport { Button } from './FeedbackOptions.style'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst FeedbackOptions = ({ state, onLeaveFeedback }) => {\r\n  const options = Object.keys(state)\r\n\r\n  return (\r\n    <>\r\n      {options.map((option) => (\r\n        <Button onClick={onLeaveFeedback} key={option}>\r\n          {option}\r\n        </Button>\r\n      ))}\r\n    </>\r\n  )\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  state: PropTypes.object.isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default FeedbackOptions\r\n","import styled from '@emotion/styled'\r\n\r\nconst List = styled.ul`\r\n  margin: 0;\r\n  padding: 0;\r\n`\r\n\r\nconst Item = styled.li`\r\n  margin: 0;\r\n  padding: 0;\r\n  list-style: none;\r\n  color: #2a323a;\r\n  font-size: 24px;\r\n  font-weight: 500;\r\n  text-transform: capitalize;\r\n  &:not(:last-child) {\r\n    margin-bottom: 10px;\r\n  }\r\n`\r\nexport { List, Item }\r\n","import styled from '@emotion/styled'\r\n\r\nconst Paragraph = styled.p`\r\n  margin: 0;\r\n  padding: 0;\r\n\r\n  color: #2a323a;\r\n  font-size: 24px;\r\n  font-weight: 500;\r\n  text-transform: capitalize;\r\n`\r\nexport { Paragraph }\r\n","import React from 'react'\r\nimport { Paragraph } from './Notification.style'\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction Notification({ message }) {\r\n  return <Paragraph>{message}</Paragraph>\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n}\r\nexport default Notification\r\n","import React from 'react'\r\nimport { List, Item } from './Statistics.style'\r\nimport Notification from '../Notification'\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction Statistics({ good, neutral, bad, total, positivePercentage = 0 }) {\r\n  return (\r\n    <>\r\n      {total > 0 ? (\r\n        <List>\r\n          <Item>Good: {good}</Item>\r\n          <Item>Neutral: {neutral}</Item>\r\n          <Item>Bad: {bad}</Item>\r\n          <Item>Total: {total}</Item>\r\n          <Item>Positive feedback: {positivePercentage}%</Item>\r\n        </List>\r\n      ) : (\r\n        <Notification message=\"No feedback given\"></Notification>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default Statistics\r\n","import styled from '@emotion/styled'\r\n\r\nconst Wrapper = styled.div`\r\n  margin-right: 50px;\r\n  margin-left: 50px;\r\n`\r\nexport { Wrapper }\r\n","import React from 'react'\r\nimport { Wrapper } from './Container.style'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Container = ({ children }) => {\r\n  return <Wrapper>{children}</Wrapper>\r\n}\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n}\r\n\r\nexport default Container\r\n","import styled from '@emotion/styled'\r\n\r\nconst Wrapper = styled.div`\r\n  padding-top: 50px;\r\n`\r\n\r\nconst Title = styled.h1`\r\n  color: #2a323a;\r\n\r\n  font-size: 40px;\r\n`\r\nexport { Wrapper, Title }\r\n","import React from 'react'\r\nimport Container from '../Container'\r\nimport { Wrapper, Title } from './Section.style'\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <Wrapper>\r\n      <Container>\r\n        {title === 'Please leave feedback' ? (\r\n          <Title>{title}</Title>\r\n        ) : (\r\n          <Title>{title}</Title>\r\n        )}\r\n        {children}\r\n      </Container>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Section\r\n","import React, { useState } from 'react'\nimport FeedbackOptions from './components/FeedbackOptions'\nimport Statistics from './components/Statistics'\nimport Section from './components/Section'\n\nexport default function App() {\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n  const feedbacksAmounts = { good, neutral, bad }\n\n  const handleIncrement = (e) => {\n    const feedback = e.currentTarget.textContent\n\n    switch (feedback) {\n      case 'good':\n        setGood((prevState) => prevState + 1)\n        break\n\n      case 'neutral':\n        setNeutral((prevState) => prevState + 1)\n        break\n\n      case 'bad':\n        setBad((prevState) => prevState + 1)\n        break\n\n      default:\n        console.log(`Такой типа ${feedback} не обрабатывается `)\n\n        break\n    }\n  }\n\n  const handleTotalAmount = (e) => {\n    const feedbacksValue = Object.values(feedbacksAmounts)\n    return feedbacksValue.reduce((sum, current) => {\n      return sum + current\n    }, 0)\n  }\n\n  const countPositiveFeedback = () => {\n    const total = handleTotalAmount()\n    const { good } = feedbacksAmounts\n\n    return Math.round((good * 100) / total)\n  }\n  const positivePercentage = countPositiveFeedback()\n  const total = handleTotalAmount()\n\n  return (\n    <div className=\"App\">\n      <Section title={'Please leave feedback'}>\n        <FeedbackOptions\n          state={feedbacksAmounts}\n          onLeaveFeedback={handleIncrement}\n        />\n      </Section>\n\n      <Section title={'Statistics'}>\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={total}\n          positivePercentage={positivePercentage}\n        />\n      </Section>\n    </div>\n  )\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}